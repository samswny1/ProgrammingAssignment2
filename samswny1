> ## Creates a specific matrix that the objest can cache its inverse in the future
> makeCacheMatrix <- function(x = matrix()) {
+   j <- NULL
+   set <- function(y){
+   x <<- y
+   j <<- NULL
+   }
+   get <- function()x
+   setInverse <- function(inverse) j <<- inverse
+   getInverse <- function() j 
+   list(set = set, get = get, 
+   setInverse = setInverse, 
+   getInverse = getInverse)
+ }
> 
> ## It computes the inverse of the specific “matrix” returned by makeCacheMatrix. The cachesolve should calculate the inverse from that cache. 
> 
> cacheSolve <- function(x, ...) {
+ ## Return a matrix that is the inverse of 'x'
+   j <- x$getInverse()
+   if(!is.null(j)){
+   message("getting cached data")
+   return(j)
+   }
+   mat <- x$get()
+   j <- solve(mat,...)
+   x$setInverse(j)
+   j
+ }
> 
> 
> 
